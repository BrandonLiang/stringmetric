apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'scala'
apply plugin: 'signing'

compileScala {
	compileScala.scalaCompileOptions.additionalParameters = ['-optimise', 'â€“Xdisable-assertions']
}

dependencies {
	compile 'org.scala-lang:scala-compiler:2.9.2'
	compile 'org.scala-lang:scala-library:2.9.2'

	scalaTools 'org.scala-lang:scala-compiler:2.9.2'
	scalaTools 'org.scala-lang:scala-library:2.9.2'

	testCompile 'com.google.caliper:caliper:0.5-rc1'
	testCompile 'junit:junit:4.10'
	testCompile 'org.scalatest:scalatest_2.9.2:1.8'
}

signing {
	sign configurations.archives
}

sourceSets {
	benchmark {
		output.resourcesDir "${project.buildDir}/classes/benchmark"

		java {
			srcDir 'source/benchmark/java'
		}
		resources {
			srcDir 'source/benchmark/resource'
		}
		scala {
			srcDir 'source/benchmark/scala'
		}
	}
	main {
		output.resourcesDir "${project.buildDir}/classes/main"

		java {
			srcDir 'source/core/java'
		}
		resources {
			srcDir 'source/core/resource'
		}
		scala {
			srcDir 'source/core/scala'
		}
	}
	test {
		output.resourcesDir "${project.buildDir}/classes/test"

		java {
			srcDir 'source/test/java'
		}
		resources {
			srcDir 'source/test/resource'
		}
		scala {
			srcDir 'source/test/scala'
		}
	}
}

task scaladocJar(type: Jar, dependsOn: scaladoc) {
	classifier = 'javadoc'
	from "${project.buildDir}/docs/scaladoc"
}

task sourceJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives jar
	archives scaladocJar
	archives sourceJar
}

def isDeployable = hasProperty('sonatypeRepositoryUrl') && hasProperty('sonatypeUsername') && hasProperty('sonatypePassword')

uploadArchives {
	repositories {
		if(isDeployable) {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

				repository(url: sonatypeRepositoryUrl) {
					authentication(userName: sonatypeUsername, password: sonatypePassword)
				}

				pom.project {
					description "${parent.project.description}"
					groupId "${parent.project.group}"
					name "${project.name}"
					packaging 'jar'
					url "${parent.project.url}"
					version "${parent.project.version}"

					developers {
						developer {
							id 'rockymadden'
							name 'Rocky Madden'
						}
					}
	 
					licenses {
						license {
							name 'Apache License v2.0'
							url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
							distribution 'repo'
						}
					}

					scm {
						url "${parent.project.scm}"
						connection "${parent.project.scm}"
					}
				}
			}
		} else { mavenLocal() }
	}
}